// import { z } from 'zod';

// const universitySchema = z.object({
//   id: z.string().cuid(),
//   name: z.string(),
//   countryCode: z.string()
// })

// import { createInsertSchema, createSelectSchema } from "drizzle-zod";
// import { universities } from "@repo/database"; // your Drizzle model
// import { z } from "zod";

// // Select Schema: used for reading (e.g., GET requests)
// export const selectUniversitySchema = createSelectSchema(universities);

// // Insert Schema: used for creating new university records (e.g., POST)
// export const insertUniversitySchema = createInsertSchema(universities, {
//   name: (val: z.ZodString) => val.min(1).max(255),
//   countryCode: (val: z.ZodString) => val.min(2).max(10)
// }).omit({
//   id: true // omit `id` because it's usually auto-generated
// });

// // Update Schema: used for updating existing records (e.g., PATCH or PUT)
// export const updateUniversitySchema = createInsertSchema(universities).partial().omit({
//   id: true
// });

// // TypeScript Types (inferred from schemas)
// export type University = z.infer<typeof selectUniversitySchema>;
// export type InsertUniversity = z.infer<typeof insertUniversitySchema>;
// export type UpdateUniversity = z.infer<typeof updateUniversitySchema>;

import { createInsertSchema, createSelectSchema } from "drizzle-zod";

import { university } from "@repo/database";
import { z } from "zod";

export const selectUniversitySchema = createSelectSchema(university);

export const insertUniversitySchema = createInsertSchema(university, {
  name: (val) => val.min(1).max(500),
  location: (val) => val.min(0).max(500).optional(),
  website: (val) => val.min(0).max(500).optional(),
  isPublic: (val) => val.optional(), // boolean, so optional without length limits
}).omit({
  id: true, // omit id because it's autogenerated
  createdAt: true,
  updatedAt: true,
});

export const updateUniversitySchema = createInsertSchema(university)
  .omit({
    id: true,
    createdAt: true,
    updatedAt: true,
  })
  .partial();

// Type Definitions
export type University = z.infer<typeof selectUniversitySchema>;

export type InsertUniversity = z.infer<typeof insertUniversitySchema>;

export type UpdateUniversity = z.infer<typeof updateUniversitySchema>;
